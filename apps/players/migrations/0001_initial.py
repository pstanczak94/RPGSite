# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-13 21:27
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import rpgsite.tools


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.SmallIntegerField(choices=[(1, 'Player'), (2, 'Gamemaster'), (3, 'God')], default=1, verbose_name='group')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('sex', models.PositiveSmallIntegerField(choices=[(1, 'Male'), (0, 'Female')], default=1)),
                ('vocation', models.SmallIntegerField(choices=[(4, 'Knight'), (3, 'Paladin'), (1, 'Sorcerer'), (2, 'Druid')], db_index=True, default=4)),
                ('town_id', models.SmallIntegerField(choices=[(1, 'Trekolt'), (2, 'Rhyves'), (3, 'Varak'), (4, 'Jorvik'), (5, 'Saund')], default=1, verbose_name='town')),
                ('creation', models.IntegerField(default=rpgsite.tools.GetCurrentTimestamp)),
                ('level', models.IntegerField(default=1)),
                ('health', models.IntegerField(default=150)),
                ('healthmax', models.IntegerField(default=150)),
                ('experience', models.BigIntegerField(default=0)),
                ('lookbody', models.IntegerField(default=0)),
                ('lookfeet', models.IntegerField(default=0)),
                ('lookhead', models.IntegerField(default=0)),
                ('looklegs', models.IntegerField(default=0)),
                ('looktype', models.IntegerField(default=136)),
                ('lookaddons', models.IntegerField(default=0)),
                ('maglevel', models.IntegerField(default=0)),
                ('mana', models.IntegerField(default=0)),
                ('manamax', models.IntegerField(default=0)),
                ('manaspent', models.IntegerField(default=0)),
                ('soul', models.IntegerField(default=0)),
                ('posx', models.IntegerField(default=0)),
                ('posy', models.IntegerField(default=0)),
                ('posz', models.IntegerField(default=0)),
                ('conditions', models.BinaryField(default=b'')),
                ('cap', models.IntegerField(default=150)),
                ('lastlogin', models.BigIntegerField(default=0)),
                ('lastlogout', models.BigIntegerField(default=0)),
                ('lastip', models.IntegerField(default=0)),
                ('save_on_logout', models.BooleanField(db_column='save', default=True)),
                ('stamina', models.SmallIntegerField(default=2520)),
                ('skull', models.BooleanField(default=False)),
                ('skulltime', models.IntegerField(default=0)),
                ('balance', models.PositiveIntegerField(default=0)),
                ('blessings', models.IntegerField(default=0)),
                ('onlinetime', models.IntegerField(default=0)),
                ('deletion', models.BigIntegerField(default=0)),
                ('offlinetraining_time', models.SmallIntegerField(default=43200)),
                ('offlinetraining_skill', models.IntegerField(default=-1)),
                ('skill_fist', models.IntegerField(default=10)),
                ('skill_fist_tries', models.BigIntegerField(default=0)),
                ('skill_club', models.IntegerField(default=10)),
                ('skill_club_tries', models.BigIntegerField(default=0)),
                ('skill_sword', models.IntegerField(default=10)),
                ('skill_sword_tries', models.BigIntegerField(default=0)),
                ('skill_axe', models.IntegerField(default=10)),
                ('skill_axe_tries', models.BigIntegerField(default=0)),
                ('skill_dist', models.IntegerField(default=10)),
                ('skill_dist_tries', models.BigIntegerField(default=0)),
                ('skill_shielding', models.IntegerField(default=10)),
                ('skill_shielding_tries', models.BigIntegerField(default=0)),
                ('skill_fishing', models.IntegerField(default=10)),
                ('skill_fishing_tries', models.BigIntegerField(default=0)),
            ],
            options={
                'db_table': 'players',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerDeath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.BigIntegerField()),
                ('level', models.IntegerField()),
                ('killed_by', models.CharField(max_length=255)),
                ('is_player', models.IntegerField()),
                ('mostdamage_by', models.CharField(max_length=100)),
                ('mostdamage_is_player', models.IntegerField()),
                ('unjustified', models.IntegerField()),
                ('mostdamage_unjustified', models.IntegerField()),
            ],
            options={
                'db_table': 'player_deaths',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerDepotItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sid', models.IntegerField()),
                ('pid', models.IntegerField()),
                ('itemtype', models.SmallIntegerField()),
                ('count', models.SmallIntegerField()),
                ('attributes', models.TextField()),
            ],
            options={
                'db_table': 'player_depotitems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerInboxItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sid', models.IntegerField()),
                ('pid', models.IntegerField()),
                ('itemtype', models.SmallIntegerField()),
                ('count', models.SmallIntegerField()),
                ('attributes', models.TextField()),
            ],
            options={
                'db_table': 'player_inboxitems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.IntegerField()),
                ('sid', models.IntegerField()),
                ('itemtype', models.SmallIntegerField()),
                ('count', models.SmallIntegerField()),
                ('attributes', models.TextField()),
            ],
            options={
                'db_table': 'player_items',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerSpell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'player_spells',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'player_storage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerNamelock',
            fields=[
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='namelocked_player', serialize=False, to='players.Player')),
                ('reason', models.CharField(max_length=255)),
                ('namelocked_at', models.BigIntegerField()),
            ],
            options={
                'db_table': 'player_namelocks',
                'managed': False,
            },
        ),
    ]
