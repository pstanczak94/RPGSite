# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-04 19:30
from __future__ import unicode_literals

import apps.accounts.models
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'An account with that username already exists.'}, help_text='Username needs to be from 3 to 30 characters length.\nAllowed characters are: a-z, A-Z, 0-9.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid username. This value may contain only english letters and digits.', regex='^[a-zA-Z0-9]+$'), django.core.validators.MinLengthValidator(3)], verbose_name='username')),
                ('password', models.CharField(help_text="Password needs to be from 6 to 50 characters length.\nIt can't be too common or contain only numbers.", max_length=128, verbose_name='password')),
                ('email', models.EmailField(blank=True, help_text='This email will be verified later and used for account recovery.', max_length=254, verbose_name='email address')),
                ('access', models.PositiveSmallIntegerField(choices=[(1, 'Normal'), (2, 'Tutor'), (3, 'Senior Tutor'), (4, 'Gamemaster'), (5, 'God')], default=1, help_text='This field describes the access level of an account.', verbose_name='access level')),
                ('secret', models.CharField(default='', help_text='Secret token used by a game server to authenticate accounts.', max_length=16, verbose_name='secret auth token')),
                ('premium_days', models.IntegerField(default=0, help_text='Number of premium days left.', verbose_name='premium days')),
                ('last_day', models.PositiveIntegerField(default=0, help_text='This field is a helper for premium days calculations.', verbose_name='last premium day')),
                ('email_activated', models.BooleanField(default=False, help_text='Designates whether this user has verified his email.', verbose_name='email activated')),
                ('email_activation_key', models.CharField(blank=True, default='', max_length=64, verbose_name='email activation token')),
                ('email_key_expires', models.DateTimeField(blank=True, default=None, null=True, verbose_name='expiration date of the email activation token')),
            ],
            options={
                'verbose_name': 'account',
                'verbose_name_plural': 'accounts',
                'db_table': 'accounts',
            },
            managers=[
                ('objects', apps.accounts.models.AccountManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountGroup',
            fields=[
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'proxy': True,
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
